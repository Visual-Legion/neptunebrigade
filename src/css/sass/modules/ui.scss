//F(x) = ( $wrapper-width - (n-1)$gutter-width ) / n

body, html, .page{
  background: $black;
  color: $base_color;
}

.blurb_section{
  figure{
    img{
      height: 100px;
      object-fit: cover;
    }
  }
}

article{
  display: flex;
  flex-direction: column;
  p,ul{
    align-self: center;
  }
}
article > *{
  margin: 40px 0;
}

.wp-block-atomic-blocks-ab-container{
      width: 100%;
}

.ab-container-inside{
  max-width: 1200px;
    margin: auto;
    padding: 0 40px;
  @include big-phone{
    padding: 0 20px;
  }
  @include phone{
    padding: 0 5px;
  }
}

body .ab-block-container, footer{
  padding: 5% 0 !important;
}

.wp-block-columns{
  @include tablet{
    flex-direction: column;
  }
  .wp-block-column{
    overflow-wrap: normal;
    word-break: normal;
    margin-right: 0;
    margin-left: 0;
  }
}


.accent_color{
  color: $accent_color;
  &h1, &h2, &h3, &p, h1, h2, h3, p{
    color: $accent_color;
  }
}

.base_color{
  color: $base_color;
  &h1, &h2, &h3, &p, h1, h2, h3, p{
    color: $base_color;
  }
}

.background_black{
  background-color:$black !important;
}

.background_navy{
  background-color:$navy !important;
}

p,ul{
  // max-width: 960px;
  margin: auto;
}

.error{
  color:$error;
}

body .flex_centered{
  display: flex;
  flex-direction: column;
}

.content_wrapper{
  @include min-macbook{
    width: $wrapper-width;
    text-align: center;
  }
  @include macbook{
    width: 100%;
  }
}

.columns-1{
  width: $wrapper-width;
}

.columns-2{
  width: ($wrapper-width - $gutter-width)/2; 
}

.columns-3{
  width: ($wrapper-width - $gutter-width*2)/3; 
}

.columns-4{
  width: ($wrapper-width - $gutter-width*3)/4; 
}

.columns-6{
  width: ($wrapper-width - $gutter-width*5)/6;  
}

.columns-8{
  width: ($wrapper-width - $gutter-width*7)/8;  
}

.columns-12{
  width: $column-width;
}

// F(x) =  n * $column-width + (n-1) * $gutter-width

.col-1{
  width: $column-width;
}

.col-2{
  width: $column-width * 2 + $gutter-width;
}

.col-3{
  width: $column-width * 3 + 2 * $gutter-width;
}

.col-4{
  width: $column-width * 4 + 3 * $gutter-width;
}

.col-6{
  width: $column-width * 6 + 5 * $gutter-width;
}

.col-8{
  width: $column-width * 8 + 7 * $gutter-width;
}

.col-9{
  width: $column-width * 9 + 8 * $gutter-width;
}

.col-10{
  width: $column-width * 10 + 9 * $gutter-width; 
}

.col-12{
  width: $column-width * 12 + 11 * $gutter-width;
}

.col{

  &:first-child{
    margin-right: $gutter-width;
  }
  &:last-child{
    margin-right: $gutter-width;
  }
  &:not(:first-child):not(:last-child){
    margin-right: $gutter-width/2;
    margin-left: $gutter-width/2;
  }
}

.col-4,.col-8, .col-6{
  padding: 10px;
  @include divi{
    width: 100%;
  }
}


// $wrapper-width: 1280px;
// $gutter-width: 20px;
// $column-width: 88px;


//button

// p, ul, ol, pre, table, blockquote {
//   margin-top: 0px;
//   margin-bottom: 21px;
// }
// ul ul, ol ol, ul ol, ol ul {
//   margin-top: 0px;
//   margin-bottom: 0px;
// }

// hr, .hr {
//   border: 1px solid;
//   margin: -1px 0;
// }
// a, b, i, strong, em, small, code {
//   line-height: 0;
// }
// sub, sup {
//   line-height: 0;
//   position: relative;
//   vertical-align: baseline;
// }
// sup {
//   top: -0.5em;
// }
// sub {
//   bottom: -0.25em;
// }



/*BLOQUOTE*/

// blockquote{
//   font-size: $h3;
//   // width:60%;
//   // margin:50px auto;
//   font-style:italic;
//   // color: #555555;
//   padding:1.2em 30px 1.2em 75px;
//   border-left:8px solid $accent_color ;
//   line-height:1.6;
//   position: relative;
//   // background:#EDEDED;
// }

// blockquote::before{
//   font-family:Arial;
//   content: "\201C";
//   color:$accent_color;
//   font-size:4em;
//   position: absolute;
//   left: 0px;
//   top:-20px;
// }

// blockquote::after{
//   content: '';
// }

// blockquote span{
//   display:block;
//   color:#333333;
//   font-style: normal;
//   font-weight: bold;
//   margin-top:1em;
// }

blockquote{
  font-style:italic;
}

/* GUTENBERG EMBEDS */
.wp-block-embed{
  &.aligncenter{
    text-align: center;
  }
}

/* Loader */

.loader{
  position: fixed;
  left: 0px;
  top: 0px;
  width: 100%;
  height: 100%;
  z-index: 9999;
  // background: white;
  background-color: $black;
  background-size: 100px;

  img{
    width: 128px;
  }

  &.parent:before{
    display: none;
  }
  .content_wrapper{
    text-align:center;
    img{
      width: 200px;
      margin-bottom: 20px;
    }
    color: $accent_color;
    font-size: $body;
    [class*="loader-"] {
      display: block;
      width: 1em;
      height: 1em;
      color: inherit;
      vertical-align: middle;
      pointer-events: none;
      margin: 0px auto 0;
    }
    .loader-05 {
      border: .20em solid transparent;
      border-top-color: currentcolor;
      border-radius: 50%;
      animation: 1s loader-05 linear infinite;
      position: relative;
      &:before {
        content: '';
        display: block;
        width: inherit;
        height: inherit;
        position: absolute;
        top: -.20em;
        ;
        left: -.20em;
        ;
        border: .20em solid currentcolor;
        border-radius: 50%;
        opacity: .5;
      }
    }

    @keyframes loader-05 {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }
  }
  
}

.utopia_wrapper{

  // Thanks https://codepen.io/cipherbeta/pen/YLdVjw?page=1&

  background: linear-gradient(271deg, #f98f48, #dba987, #bdc1a1, #94ceb8, #08d0c1);
  background-size: 1000% 1000%;
  height: 100%;

  display: flex;
  justify-content: center;
  align-items: center;

  -webkit-animation: AnimationName 10s linear infinite;
  -moz-animation: AnimationName 10s linear infinite;
  animation: AnimationName 10s linear infinite;

  @-webkit-keyframes AnimationName {
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
  }
  @-moz-keyframes AnimationName {
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
  }
  @keyframes AnimationName { 
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
  }

  // .glitch {
  //   position: relative;
  // }
  // .glitch::before,
  // .glitch::after {
  //   content: attr(data-text);
  //   position: absolute;
  //   top: 0;
  //   left: 0;
  //   width: 100%;
  //   height: 100%;
  // }

  // Here's the meat and potatoes.

  /* Our mixin positions a copy of our text
  directly on our existing text, while
  also setting content to the appropriate
  text set in the data-text attribute. */
  @mixin glitchCopy { 
      content: attr(data-text);
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
  }

  .glitch {
    position: relative;
    color: white;
    font-size: 4em;
    letter-spacing: .5em;

    @include ipad{
      font-size: 2em;
    }

    /* Animation provies a slight random skew. Check bottom of doc
    for more information on how to random skew. */
    animation: glitch-skew 1s infinite linear alternate-reverse;
    
    // Creates a copy before our text. 
    &::before{
      // Duplicates our text with the mixin.
      @include glitchCopy;
      // Scoots text slightly to the left for the color offset.
      left: 2px;
      // Creates the color 'shadow' that happens on the glitch.
      text-shadow: -2px 0 #ff00c1;
      /* Creates an initial clip for our glitch. This works in
      a typical top,right,bottom,left fashion and creates a mask
      to only show a certain part of the glitch at a time. */
      clip: rect(44px, 450px, 56px, 0);
      /* Runs our glitch-anim defined below to run in a 5s loop, infinitely,
      with an alternating animation to keep things fresh. */
      animation: glitch-anim 5s infinite linear alternate-reverse;
    }
    
    // Creates a copy after our text. Note comments from ::before.
    &::after {
      @include glitchCopy;
      left: -2px;
      text-shadow: -2px 0 #00fff9, 2px 2px #ff00c1;
      animation: glitch-anim2 1s infinite linear alternate-reverse;
    }
  }

  /* Creates an animation with 20 steaps. For each step, it calculates 
  a percentage for the specific step. It then generates a random clip
  box to be used for the random glitch effect. Also adds a very subtle
  skew to change the 'thickness' of the glitch.*/
  @keyframes glitch-anim {
    $steps: 20;
    @for $i from 0 through $steps {
      #{percentage($i*(1/$steps))} {
        clip: rect(random(100)+px, 9999px, random(100)+px, 0);
        transform: skew((random(100) / 100) + deg);
      }
    }
  }

  // Same deal, just duplicated for ultra randomness.
  @keyframes glitch-anim2 {
    $steps: 20;
    @for $i from 0 through $steps {
      #{percentage($i*(1/$steps))} {
        clip: rect(random(100)+px, 9999px, random(100)+px, 0);
        transform: skew((random(100) / 100) + deg);
      }
    }
  }

  // Does the same deal as before, but now only skews. Used for main text.
  @keyframes glitch-skew {
    $steps: 10;
    @for $i from 0 through $steps {
      #{percentage($i*(1/$steps))} {
        transform: skew((random(10) - 5) + deg);
      }
    }
  } 

}
  
/* Like */

.likebtn-wrapper.lb-style-custom{
  .lb-like, .lb-dislike{
    background-color: transparent;
    border: none;
  }
} 

/* slide action */
/* maybe include later with js for <ipad */

@include min-ipad{
  .slide-down,
  .slide-left,
  .slide-right,
  .slide-up{
    will-change: transform;
    transition: all 1s ease-in-out;
    transition-delay: 0.5s;
  }

  .active{
    .slide-down,
    .slide-left,
    .slide-right,
    .slide-up{
      transform:translate(0);
      opacity:1;
      &.s-absolute{
        @include divi{
          transform:translateX(-50%);
        }
      }
    }
  }

  .slide-down{
    opacity:0;
    transform: translate(0,-1000%);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-left{
    opacity:0;
    transform: translate(1000%,0);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-right{
    opacity:0;
    transform: translate(-1000%,0);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
  .slide-up{
    opacity:0;
    transform: translate(0,1000%);
    // &.slid{
    //  transform:translate(0);
    //  opacity:1;
    // }
  }
}